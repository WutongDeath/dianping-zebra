package com.dianping.zebra.group.router;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import java.util.Map;import com.dianping.zebra.group.config.BaseGroupConfigChangeEvent;import com.dianping.zebra.group.config.GroupConfigChangeListener;import com.dianping.zebra.group.config.datasource.entity.DataSourceConfig;import com.dianping.zebra.group.util.SqlUtils;public class GroupReadWriteDataSourceRouter extends AbstractGroupDataSourceRouter implements GroupConfigChangeListener {	// private static final Logger logger = LoggerFactory.getLogger(ReadWriteDataSourcerouter.class);	private GroupWeightDataSourceRouter readrouter;	private GroupWeightDataSourceRouter writerouter;	public GroupReadWriteDataSourceRouter(Map<String, DataSourceConfig> DataSourceConfigs) {		this.init(DataSourceConfigs);	}	public void init(Map<String, DataSourceConfig> DataSourceConfigs) {		List<DataSourceConfig> readDataSourceConfigs = new ArrayList<DataSourceConfig>();		List<DataSourceConfig> writeDataSourceConfigs = new ArrayList<DataSourceConfig>();		for (DataSourceConfig config : DataSourceConfigs.values()) {			boolean readonly = config.isReadonly();			if (readonly) {				readDataSourceConfigs.add(config);			} else {				writeDataSourceConfigs.add(config);			}		}		this.readrouter = new GroupWeightDataSourceRouter(readDataSourceConfigs, true);		this.writerouter = new GroupWeightDataSourceRouter(writeDataSourceConfigs, false);	}	@Override	public GroupDataSourceTarget select(GroupDataSourceRouterInfo routerInfo) {		// 判断出sql的SqlType，算出它是read还是write		SqlType sqlType = getSqlType(routerInfo);		if (sqlType.isRead()) {			return readrouter.select(routerInfo);		} else {			return writerouter.select(routerInfo);		}	}	private SqlType getSqlType(GroupDataSourceRouterInfo routerInfo) {		String sql = routerInfo.getSql();		try {			return SqlUtils.getSqlType(sql);		} catch (SQLException e) {			throw new RuntimeException(e.getMessage(), e);		}	}	public String getName() {		return this.getName();	}	@Override	public void onChange(BaseGroupConfigChangeEvent event) {	}	@Override	public void onActiveDataSourceChange(Map<String, DataSourceConfig> configs) {		this.init(configs);	}	@Override	public String getRouterStrategy() {		return "roundrobin";	}}