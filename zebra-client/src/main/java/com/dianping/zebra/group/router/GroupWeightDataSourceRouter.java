package com.dianping.zebra.group.router;import java.util.List;import java.util.Random;import java.util.TreeSet;import com.dianping.zebra.group.config.datasource.entity.DataSourceConfig;/** *  *  *  * 对等数据库管理器 可以是读对等：如多个读库，每个库的数据完全相同。对等读取 可以是写对等：如日志库，每个库数据不同，一条数据写入哪个库都可以。对等写入 *  * 支持动态推送权重，动态加减库。 *  * TODO 1. 监听config变化，activeDataSource list 变化时，重新构造WeigthRandom。<br> * 2. 再写一个读写的router */public class GroupWeightDataSourceRouter extends AbstractGroupDataSourceRouter {	// private static final Logger logger = LoggerFactory.getLogger(WeightDataSourcerouter.class);	private boolean isReadOnly;	private WeightRandom weightRandom;	private List<DataSourceConfig> DataSourceConfigs;	public GroupWeightDataSourceRouter(List<DataSourceConfig> DataSourceConfigs, boolean isReadOnly) {		this.DataSourceConfigs = DataSourceConfigs;		this.isReadOnly = isReadOnly;		this.weightRandom = new WeightRandom(DataSourceConfigs);	}	@Override	public GroupDataSourceTarget select(GroupDataSourceRouterInfo routerInfo) {		String dataSourceId = weightRandom.select();		return new GroupDataSourceTarget(dataSourceId, isReadOnly);	}	public boolean isReadOnly() {		return isReadOnly;	}	public void setReadOnly(boolean isReadOnly) {		this.isReadOnly = isReadOnly;	}	public List<DataSourceConfig> getDataSourceConfigs() {		return DataSourceConfigs;	}	public void setDataSourceConfigs(List<DataSourceConfig> DataSourceConfigs) {		this.DataSourceConfigs = DataSourceConfigs;	}	private static class WeightRandom {		private int weightAreaSize = 0;		private TreeSet<WeightArea> weights = new TreeSet<WeightArea>();		private Random random = new Random();		public WeightRandom(List<DataSourceConfig> DataSourceConfigs) {			// check dataSourceWeights (unique,and weight larger than 0)			check(DataSourceConfigs);			// build area			for (DataSourceConfig DataSourceConfig : DataSourceConfigs) {				weightAreaSize += DataSourceConfig.getWeight();				WeightArea weightArea = new WeightArea(DataSourceConfig.getId(), weightAreaSize - 1);				weights.add(weightArea);			}		}		private void check(List<DataSourceConfig> DataSourceConfigs) {			if (DataSourceConfigs == null || DataSourceConfigs.size() <= 0) {				throw new IllegalArgumentException("DataSourceConfigs should not be empty.");			}		}		public String select() {			int randomNum = random.nextInt(weightAreaSize);			String dataSourceId = weights.ceiling(new WeightArea(null, randomNum)).dataSourceId;			return dataSourceId;		}		private static class WeightArea implements Comparable<WeightArea> {			private String dataSourceId;			private int end;			private WeightArea(String dataSourceId, int end) {				super();				this.dataSourceId = dataSourceId;				this.end = end;			}			@Override			public int compareTo(WeightArea o) {				return end - o.end;			}		}	}}