package com.dianping.zebra.group.router;import java.util.List;import java.util.Random;import java.util.Set;import java.util.TreeSet;import com.dianping.zebra.group.config.datasource.entity.DataSourceConfig;/** * 按权重做路由的DataSource选择器 */public class GroupWeightDataSourceRouter implements GroupDataSourceRouter {	private boolean readOnly;	private WeightRandom weightRandom;	private List<DataSourceConfig> dataSourceConfigs;	public GroupWeightDataSourceRouter(List<DataSourceConfig> dataSourceConfigs, boolean isReadOnly) {		this.dataSourceConfigs = dataSourceConfigs;		this.readOnly = isReadOnly;		this.weightRandom = new WeightRandom(dataSourceConfigs);	}	@Override	public GroupDataSourceTarget select(GroupDataSourceRouterInfo routerInfo) {		return this.select(routerInfo, null);	}	@Override	public GroupDataSourceTarget select(GroupDataSourceRouterInfo routerInfo, Set<GroupDataSourceTarget> excludeTargets) {		WeightArea weightArea = weightRandom.select(excludeTargets);		if (weightArea != null) {			return new GroupDataSourceTarget(weightArea.dataSourceId, weightArea.weight, readOnly);		}		return null;	}	public boolean isReadOnly() {		return readOnly;	}	public void setReadOnly(boolean isReadOnly) {		this.readOnly = isReadOnly;	}	public List<DataSourceConfig> getDataSourceConfigs() {		return dataSourceConfigs;	}	public void setDataSourceConfigs(List<DataSourceConfig> DataSourceConfigs) {		this.dataSourceConfigs = DataSourceConfigs;	}	private static class WeightRandom {		private int weightAreaSize = 0;		private TreeSet<WeightArea> weights = new TreeSet<WeightArea>();		private Random random = new Random();		public WeightRandom(List<DataSourceConfig> configs) {			// check dataSourceWeights (unique,and weight larger than 0)			check(configs);			// build area			for (DataSourceConfig config : configs) {				int weight = config.getWeight();				if (weight > 0) {					weightAreaSize += weight;					WeightArea weightArea = new WeightArea(config.getId(), weight, weightAreaSize - 1);					weights.add(weightArea);				}			}		}		private void check(List<DataSourceConfig> dataSourceConfigs) {			if (dataSourceConfigs == null || dataSourceConfigs.isEmpty()) {				throw new IllegalArgumentException("DataSourceConfigs should not be empty.");			}		}		public WeightArea select(Set<GroupDataSourceTarget> excludeTargets) {			TreeSet<WeightArea> _weights = this.weights;			int _weightAreaSize = this.weightAreaSize;			if (excludeTargets != null && !excludeTargets.isEmpty()) {				// 需要排除某些GroupDataSourceTarget的话，就重新copy一个weights				TreeSet<WeightArea> copyWeights = new TreeSet<WeightArea>(_weights);				for (GroupDataSourceTarget target : excludeTargets) {					WeightArea tempForRemove = new WeightArea(target.getId(), -1, -1);					if (copyWeights.remove(tempForRemove)) {						_weightAreaSize -= target.getWeight();					}				}				_weights = copyWeights;			}			if (_weights.isEmpty() || _weightAreaSize <= 0) {				return null;			}			int randomNum = random.nextInt(_weightAreaSize);			return _weights.ceiling(new WeightArea(null, -1, randomNum));		}	}		private static class WeightArea implements Comparable<WeightArea> {		private String dataSourceId;		private int end;		private int weight;		private WeightArea(String dataSourceId, int weight, int end) {			super();			this.dataSourceId = dataSourceId;			this.weight = weight;			this.end = end;		}		@Override		public int compareTo(WeightArea o) {			return end - o.end;		}		@Override		public int hashCode() {			final int prime = 31;			int result = 1;			result = prime * result + ((dataSourceId == null) ? 0 : dataSourceId.hashCode());			return result;		}		@Override		public boolean equals(Object obj) {			if (this == obj)				return true;			if (obj == null)				return false;			if (getClass() != obj.getClass())				return false;			WeightArea other = (WeightArea) obj;			if (dataSourceId == null) {				if (other.dataSourceId != null)					return false;			} else if (!dataSourceId.equals(other.dataSourceId))				return false;			return true;		}	}	@Override	public String getRouterStrategy() {		return "weight-random";	}}