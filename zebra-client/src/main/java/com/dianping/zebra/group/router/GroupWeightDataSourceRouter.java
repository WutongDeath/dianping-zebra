package com.dianping.zebra.group.router;import java.util.List;import java.util.Random;import java.util.Set;import java.util.TreeSet;import com.dianping.zebra.group.config.datasource.entity.DataSourceConfig;/** * 按权重做路由的DataSource选择器 */public class GroupWeightDataSourceRouter implements GroupDataSourceRouter {	private WeightRandom weightRandom;	private List<DataSourceConfig> dataSourceConfigs;	public GroupWeightDataSourceRouter(List<DataSourceConfig> dataSourceConfigs, boolean readOnly) {		this.dataSourceConfigs = dataSourceConfigs;		this.weightRandom = new WeightRandom(dataSourceConfigs, readOnly);	}	@Override	public GroupDataSourceTarget select(GroupDataSourceRouterInfo routerInfo) {		return this.select(routerInfo, null);	}	@Override	public GroupDataSourceTarget select(GroupDataSourceRouterInfo routerInfo, Set<GroupDataSourceTarget> excludeTargets) {		return weightRandom.select(excludeTargets);	}	public List<DataSourceConfig> getDataSourceConfigs() {		return dataSourceConfigs;	}	public void setDataSourceConfigs(List<DataSourceConfig> DataSourceConfigs) {		this.dataSourceConfigs = DataSourceConfigs;	}	private static class WeightRandom {		private int groupDataSourceTargetSize = 0;		private TreeSet<GroupDataSourceTarget> targets = new TreeSet<GroupDataSourceTarget>();		private Random random = new Random();		public WeightRandom(List<DataSourceConfig> configs, boolean readOnly) {			// check dataSourceWeights (unique,and weight larger than 0)			check(configs);			// build area			for (DataSourceConfig config : configs) {				int weight = config.getWeight();				groupDataSourceTargetSize += weight;				GroupDataSourceTarget groupDataSourceTarget = new GroupDataSourceTarget(config.getId(), weight,				      groupDataSourceTargetSize - 1, readOnly);				targets.add(groupDataSourceTarget);			}		}		private void check(List<DataSourceConfig> dataSourceConfigs) {			if (dataSourceConfigs == null || dataSourceConfigs.size() <= 0) {				throw new IllegalArgumentException("DataSourceConfigs should not be empty.");			}		}		public GroupDataSourceTarget select(Set<GroupDataSourceTarget> excludeTargets) {			TreeSet<GroupDataSourceTarget> _weights = this.targets;			int _groupDataSourceTargetSize = this.groupDataSourceTargetSize;			if (excludeTargets != null && !excludeTargets.isEmpty()) {				// 需要排除某些GroupDataSourceTarget的话，就重新copy一个weights				TreeSet<GroupDataSourceTarget> copyWeights = new TreeSet<GroupDataSourceTarget>(_weights);				for (GroupDataSourceTarget target : excludeTargets) {					if (copyWeights.remove(target)) {						_groupDataSourceTargetSize -= target.getWeight();					}				}				_weights = copyWeights;			}			if (_weights.isEmpty() || _groupDataSourceTargetSize <= 0) {				return null;			}			int randomNum = random.nextInt(_groupDataSourceTargetSize);			GroupDataSourceTarget tempForSearch = new GroupDataSourceTarget(null, -1, randomNum, false);			return _weights.ceiling(tempForSearch);		}	}	@Override	public String getRouterStrategy() {		return "weight-random";	}}
