/*(C) 2007-2012 Alibaba Group Holding Limited.	 *This program is free software; you can redistribute it and/or modify	 *it under the terms of the GNU General Public License version 2 as	 * published by the Free Software Foundation.	 * Authors:	 *   junyu <junyu@taobao.com> , shenxun <shenxun@taobao.com>,	 *   linxuan <linxuan@taobao.com> ,qihao <qihao@taobao.com> 	 */package com.dianping.zebra.group.router;import java.util.ArrayList;import java.util.List;import java.util.Random;import java.util.TreeSet;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** *  *  *  * 对等数据库管理器 可以是读对等：如多个读库，每个库的数据完全相同。对等读取 可以是写对等：如日志库，每个库数据不同，一条数据写入哪个库都可以。对等写入 *  * 支持动态推送权重，动态加减库。 *  * TODO 1. 监听config变化，activeDataSource list 变化时，重新构造WeigthRandom。<br> * 2. 再写一个读写的selector */public class WeightDataSourceSelector extends AbstractDataSourceSelector {	private static final Logger logger = LoggerFactory.getLogger(WeightDataSourceSelector.class);	private WeightRandom weightRandom;	public WeightDataSourceSelector(List<DataSourceWeight> dataSourceWeights) {		this.weightRandom = new WeightRandom(dataSourceWeights);	}	@Override	public String select() {		return weightRandom.select();	}	private static class WeightRandom {		private int weightAreaSize = 0;		private TreeSet<WeightArea> weights = new TreeSet<WeightArea>();		private Random random = new Random();		public WeightRandom(List<DataSourceWeight> dataSourceWeights) {			// check dataSourceWeights (unique,and weight larger than 0)			check(dataSourceWeights);			// build area			for (DataSourceWeight dataSourceWeight : dataSourceWeights) {				weightAreaSize += dataSourceWeight.getWeight();				WeightArea weightArea = new WeightArea(dataSourceWeight.getDataSourceKey(), weightAreaSize - 1);				weights.add(weightArea);			}		}		private void check(List<DataSourceWeight> dataSourceWeights) {			if (dataSourceWeights == null || dataSourceWeights.size() <= 0) {				throw new IllegalArgumentException("dataSourceWeights should not be empty.");			}		}		public String select() {			int randomNum = random.nextInt(weightAreaSize);			return weights.ceiling(new WeightArea(null, randomNum)).dataSourceKey;		}		private static class WeightArea implements Comparable<WeightArea> {			private String dataSourceKey;			private int end;			private WeightArea(String dataSourceKey, int end) {				super();				this.dataSourceKey = dataSourceKey;				this.end = end;			}			@Override			public int compareTo(WeightArea o) {				return end - o.end;			}		}		public static void main(String[] args) {			List<DataSourceWeight> list = new ArrayList<DataSourceWeight>();			list.add(new DataSourceWeight("a", 10));			list.add(new DataSourceWeight("b", 15));			list.add(new DataSourceWeight("c", 20));			WeightRandom weightRandom = new WeightRandom(list);			System.out.println(weightRandom.select());			System.out.println(weightRandom.select());			System.out.println(weightRandom.select());			System.out.println(weightRandom.select());			System.out.println(weightRandom.select());			System.out.println(weightRandom.select());			System.out.println(weightRandom.select());		}	}}