package com.dianping.zebra.group.router;import com.dianping.zebra.group.config.datasource.entity.DataSourceConfig;import com.dianping.zebra.util.NetworkInterfaceManager;import java.util.HashSet;import java.util.Map;import java.util.Random;import java.util.Set;import java.util.TreeSet;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * 按权重做路由的DataSource选择器 */public class WeightDataSourceRouter implements DataSourceRouter {	private WeightRandom weightRandom;	public WeightDataSourceRouter(Map<String, DataSourceConfig> dataSourceConfigs) {		this.weightRandom = new WeightRandom(dataSourceConfigs);	}	@Override	public RouterTarget select(RouterContext routerInfo) {		return weightRandom.select(routerInfo.getExcludeTargets());	}	private static class WeightRandom {		private int groupDataSourceTargetSize = 0;		private Pattern urlPattern = Pattern.compile("\\:\\d+");		private Pattern ipPrefix = Pattern.compile("\\d+\\.\\d+\\.");		private final int JDBCURL_PREFIX_LENGTH = "jdbc:mysql://".length();		private final String LOCALHOSTIP_PREFIX = buildLocalHostIpPrefix();		private TreeSet<RouterTarget> targets = new TreeSet<RouterTarget>();		private Random random = new Random();		public WeightRandom(Map<String, DataSourceConfig> configs) {			/* 如果有同机房的ds则优先选取同机房的ds 在进行weight router */			Set<DataSourceConfig> dsSet = findSameDataCenterDs(configs);			for (DataSourceConfig config : dsSet) {				int weight = config.getWeight();				groupDataSourceTargetSize += weight;				RouterTarget groupDataSourceTarget = new RouterTarget(config.getId(), weight,						groupDataSourceTargetSize - 1);				targets.add(groupDataSourceTarget);			}		}		private String buildLocalHostIpPrefix() {			String localHost = NetworkInterfaceManager.INSTANCE.getLocalHostAddress();			Matcher ipMatcher = ipPrefix.matcher(localHost);			if (ipMatcher.find()) {				return localHost.substring(0, ipMatcher.end() - 1);			}			return null;		}		private Set<DataSourceConfig> findSameDataCenterDs(Map<String, DataSourceConfig> configs) {			Set<DataSourceConfig> sameDataCenterDs = new HashSet<DataSourceConfig>();			for (DataSourceConfig config : configs.values()) {				if (isSameDataCenter(config.getJdbcUrl())) {					sameDataCenterDs.add(config);				}			}			if (sameDataCenterDs.isEmpty()) {				sameDataCenterDs = new HashSet<DataSourceConfig>(configs.values());			}			return sameDataCenterDs;		}		private boolean isSameDataCenter(String jdbcUrl) {			if (LOCALHOSTIP_PREFIX != null) {				Matcher urlMatcher = urlPattern.matcher(jdbcUrl);				if (urlMatcher.find()) {					String dsIp = jdbcUrl.substring(JDBCURL_PREFIX_LENGTH, urlMatcher.end());					if (dsIp != null && dsIp.startsWith(LOCALHOSTIP_PREFIX)) {						return true;					}				}			}			return false;		}		public RouterTarget select(Set<RouterTarget> excludeTargets) {			TreeSet<RouterTarget> weights = this.targets;			int tmpGroupDataSourceTargetSize = this.groupDataSourceTargetSize;			if (excludeTargets != null && !excludeTargets.isEmpty()) {				// 需要排除某些GroupDataSourceTarget的话，就重新copy一个weights				TreeSet<RouterTarget> copyWeights = new TreeSet<RouterTarget>(weights);				for (RouterTarget target : excludeTargets) {					if (copyWeights.remove(target)) {						tmpGroupDataSourceTargetSize -= target.getWeight();					}				}				weights = copyWeights;			}			if (weights.isEmpty() || tmpGroupDataSourceTargetSize <= 0) {				return null;			}			int randomNum = random.nextInt(tmpGroupDataSourceTargetSize);			RouterTarget tempForSearch = new RouterTarget(null, -1, randomNum);			return weights.ceiling(tempForSearch);		}	}	@Override	public String getName() {		return "weight-random";	}}