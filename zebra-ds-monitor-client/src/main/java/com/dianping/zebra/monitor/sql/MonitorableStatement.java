/**
 * Project: zebra-sql-monitor-client
 *
 * File Created at 2011-10-28
 * $Id$
 *
 * Copyright 2010 dianping.com.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Dianping Company. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with dianping.com.
 */
package com.dianping.zebra.monitor.sql;

import java.sql.*;

/**
 * @author danson.liu
 */
public class MonitorableStatement implements Statement {

	protected final Statement innerStatement;

	protected final MonitorableConnection monitorableConnection;

	protected boolean closed;

	public MonitorableStatement(Statement statement, MonitorableConnection monitorableConnection) {
		this.innerStatement = statement;
		this.monitorableConnection = monitorableConnection;
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		// 不要使用callback，此处调用相当频繁，尽量减少生成的对象数，copy code即可
		checkClosed();
		ResultSet result = innerStatement.executeQuery(sql);
		return result;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		checkClosed();
		int updatedCount = innerStatement.executeUpdate(sql);
		return updatedCount;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		checkClosed();
		int updatedCount = innerStatement.executeUpdate(sql, autoGeneratedKeys);
		return updatedCount;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		checkClosed();
		int updatedCount = innerStatement.executeUpdate(sql, columnIndexes);
		return updatedCount;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		checkClosed();
		int updatedCount = innerStatement.executeUpdate(sql, columnNames);
		return updatedCount;
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		checkClosed();
		boolean hasResultSet = innerStatement.execute(sql);
		return hasResultSet;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		checkClosed();
		boolean hasResultSet = innerStatement.execute(sql, autoGeneratedKeys);
		return hasResultSet;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		checkClosed();
		boolean hasResultSet = innerStatement.execute(sql, columnIndexes);
		return hasResultSet;
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		checkClosed();
		boolean hasResultSet = innerStatement.execute(sql, columnNames);
		return hasResultSet;
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		innerStatement.addBatch(sql);
	}

	@Override
	public void clearBatch() throws SQLException {
		innerStatement.clearBatch();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		/*
		 * 对于Statement的batch暂时不做monitor batch中的每条sql的耗时如何计算?
		 */
		checkClosed();
		return innerStatement.executeBatch();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return innerStatement.getGeneratedKeys();
	}

	@Override
	public Connection getConnection() throws SQLException {
		// 返回MonitorableConnection，用于直接从Statement拿到Connection复用的情形
		return monitorableConnection;
	}

	@Override
	public void cancel() throws SQLException {
		innerStatement.cancel();
	}

	@Override
	public void close() throws SQLException {
		if (closed) {
			return;
		}
		innerStatement.close();
		closed = true;
	}

	protected void checkClosed() throws SQLException {
		if (this.closed) {
			throw new SQLException("Operation not supported after statement closed.");
		}
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return innerStatement.getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		innerStatement.setMaxFieldSize(max);
	}

	@Override
	public int getMaxRows() throws SQLException {
		return innerStatement.getMaxRows();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		innerStatement.setMaxRows(max);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		innerStatement.setEscapeProcessing(enable);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return innerStatement.getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		innerStatement.setQueryTimeout(seconds);
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return innerStatement.getWarnings();
	}

	@Override
	public void clearWarnings() throws SQLException {
		innerStatement.clearWarnings();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		innerStatement.setCursorName(name);
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return innerStatement.getResultSet();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return innerStatement.getUpdateCount();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return innerStatement.getMoreResults(current);
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return innerStatement.getMoreResults();
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return innerStatement.getFetchDirection();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		innerStatement.setFetchDirection(direction);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return innerStatement.getFetchSize();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		innerStatement.setFetchSize(rows);
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return innerStatement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return innerStatement.getResultSetType();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return innerStatement.getResultSetHoldability();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return innerStatement.isClosed();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return innerStatement.isPoolable();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		innerStatement.setPoolable(poolable);
	}

	public void closeOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();
	}

	public boolean isCloseOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return innerStatement.unwrap(iface);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return innerStatement.isWrapperFor(iface);
	}
}
